#!/bin/bash
# Installs asdf-managed package versions
set -e

if [ "$1" = "--debug" ]; then
  shift
  PRINT_DEBUG="1"
  set -x
fi

warn() { echo "$@" >&2; }
abort() { EXPECTED_EXIT="1"; warn "$@"; exit 1; }

cleanup() {
  set +e
  if [ -n "$EXPECTED_EXIT" ]; then
    return
  fi
  warn "Error: $(basename $0) failed!"
  if [ -z "$PRINT_DEBUG" ]; then
    warn "For debugging output run:"
    warn "  $0 --debug"
  fi
}
trap "cleanup" EXIT

if ! which asdf &>/dev/null; then
  abort "Error: you need to 'brew install asdf'!"
fi

if [ ! -f .tool-versions ]; then
  abort "Error: you need a '.tool-versions' file to install packages"
fi

for plugin in $(cat .tool-versions | awk '{print $1}'); do
  if [ -z $(asdf plugin list | grep $plugin) ]; then
    asdf plugin add $plugin
  fi
done

if [ ! -z "$(grep nodejs .tool-versions)" ]; then
  brew bundle --file=- <<EOF
brew "gpg"
EOF

  bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
fi

(
  for var_override in $( env | grep -E '^ASDF_INSTALL_VAR_[^=]+=' ); do
    var="${var_override#ASDF_INSTALL_VAR_}"
    export "${var}=${!var_override@Q}"
  done
  asdf install
)

if [ ! -z "$(grep ruby .tool-versions)" ]; then
  (asdf which bundle &>/dev/null && bundle -v &>/dev/null) || {
    asdf env ruby gem install bundler
  }
fi

EXPECTED_EXIT="1"
exit 0
